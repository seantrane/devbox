#!/usr/bin/env bash

# DEPENDENCIES
! type "docker" &> /dev/null && echo "!!! Please install docker before running this script !!!" && return 1

# VARS
__DIR=$( cd "${BASH_SOURCE%/*}" && pwd )
docker_context_path=$( cd "$__DIR/../src" && pwd )
docker_image_tag="seantrane/devbox:latest"
PWD_PATH="$(pwd)"
WORK_PATH="/workspace"
# GROUP_ID="$(id -g)"
# GROUP_NAME="$(id -gn)"
# USER_ID="$(id -u)"
# USER_NAME="$(id -un)"
USER_NAME="dev"

TZ="$(readlink /etc/localtime | sed 's#/var/db/timezone/zoneinfo/##')"

#######################################
# Build Docker image.
# Globals:
#   docker
# Arguments:
#   None
# Returns:
#   None
#######################################
build_docker_image () {
  if [[ $(docker images "$docker_image_tag" -q) ]]; then
    docker rmi -f "$docker_image_tag"
  fi

  # Set options for 'docker build' command.
  options=()
  # Do not use cache when building the image.
  # options+=(--no-cache)
  # Remove intermediate containers after a successful build.
  options+=(--rm)
  # Name of the Dockerfile (Default is 'PATH/Dockerfile').
  options+=(-f "$docker_context_path/Dockerfile")
  # Name and optionally a tag in the 'name:tag' format.
  options+=(-t "$docker_image_tag")

  docker build "${options[@]}" "$docker_context_path"

  if [[ $(docker images -f "dangling=true" -q) ]]; then
    docker rmi -f "$(docker images -f "dangling=true" -q)"
  fi

  docker images
}

#######################################
# Run Docker container.
# Globals:
#   docker
# Arguments:
#   Passes arguments to the 'docker run' command.
# Returns:
#   None
#######################################
run_docker_container () {
  if [[ "$(docker images $docker_image_tag -q)" == "" ]]; then
    build_docker_image
  fi
  # Set options for 'docker run' command.
  options=()
  # Interactive (Keep STDIN open even if not attached).
  options+=(-i)
  # Allocate a pseudo-TTY.
  options+=(-t)
  # Automatically remove the container when it exits.
  options+=(--rm)

  # Pass environment variables.
  options+=(-e "TZ=${TZ:-}")
  options+=(-e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}")
  options+=(-e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}")
  options+=(-e "AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-}")
  options+=(-e "GH_TOKEN=${GH_TOKEN:-}")
  options+=(-e "NPM_TOKEN=${NPM_TOKEN:-}")

  # Mount volume to map current directory (on host) to work directory (on container).
  options+=(-v "$PWD_PATH:$WORK_PATH")
  # Mount volume for dotfiles to keep them synced.
  options+=(-v "$docker_context_path/dotfiles:/home/$USER_NAME/dotfiles")
  # Mount volumes for read-only credentials/config:
  # Use host user's SSH keys (read-only).
  if [[ -e "$HOME/.ssh" ]]; then
    options+=(-v "$HOME/.ssh:/home/$USER_NAME/.ssh:ro")
  fi
  # Use host user's Git config/credentials (read-only).
  if [[ -e "$HOME/.gitconfig" ]]; then
    options+=(-v "$HOME/.gitconfig:/home/$USER_NAME/.gitconfig:ro")
  fi
  if [[ -e "$HOME/.gitattributes" ]]; then
    options+=(-v "$HOME/.gitattributes:/home/$USER_NAME/.gitattributes:ro")
  fi
  if [[ -e "$HOME/.gitignore" ]]; then
    options+=(-v "$HOME/.gitignore:/home/$USER_NAME/.gitignore:ro")
  fi
  # Use host user's Subversion configuration (read-only).
  if [[ -e "$HOME/.subversion" ]]; then
    options+=(-v "$HOME/.subversion:/home/$USER_NAME/.subversion:ro")
  fi
  # Use host user's local runtime configuration (read-only).
  if [[ -e "$HOME/.localrc" ]]; then
    options+=(-v "$HOME/.localrc:/home/$USER_NAME/.localrc:ro")
  fi
  # Use host user's npm runtime configuration (read-only).
  if [[ -e "$HOME/.npmrc" ]]; then
    options+=(-v "$HOME/.npmrc:/home/$USER_NAME/.npmrc:ro")
  fi
  # Use host user's gem runtime configuration (read-only).
  if [[ -e "$HOME/.gemrc" ]]; then
    options+=(-v "$HOME/.gemrc:/home/$USER_NAME/.gemrc:ro")
  fi
  # Use host user's Serverless runtime configuration (read-only).
  if [[ -e "$HOME/.serverlessrc" ]]; then
    options+=(-v "$HOME/.serverlessrc:/home/$USER_NAME/.serverlessrc:ro")
  fi
  # Use host user's MongoDB runtime configuration (read-only).
  if [[ -e "$HOME/.mongorc.js" ]]; then
    options+=(-v "$HOME/.mongorc.js:/home/$USER_NAME/.mongorc.js:ro")
  fi
  # Mount volumes for persistence:
  # Allow Serverless config/prefs to be synced on host.
  if [[ -e "$HOME/.serverless" ]]; then
    options+=(-v "$HOME/.serverless:/home/$USER_NAME/.serverless")
  fi
  # Allow Travis CLI config/prefs to be synced on host.
  options+=(-v "$HOME/.travis:/home/$USER_NAME/.travis")
  # Allow Sonar Lint config/prefs to be synced on host.
  options+=(-v "$HOME/.sonarlint:/home/$USER_NAME/.sonarlint")
  # Allow AWS-CLI config/prefs to be synced on host.
  options+=(-v "$HOME/.aws:/home/$USER_NAME/.aws")
  # Allow Terraform config/prefs to be synced on host.
  options+=(-v "$HOME/.terraform.d:/home/$USER_NAME/.terraform.d")

  # Container name.
  # options+=(--name "devbox")

  docker run "${options[@]}" "$docker_image_tag" "$@"
}

run_docker_container "$@"
